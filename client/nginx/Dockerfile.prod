# Multi-stage build for production
# Stage 1: Build the frontend
FROM node:20-alpine AS build-stage

WORKDIR /app

# Install dependencies
COPY client/package*.json ./
RUN npm ci --only=production

# Copy source code
COPY client/ ./

# Build the application
RUN npm run build

# Stage 2: Nginx server
FROM nginx:alpine

# Install necessary packages
RUN apk add --no-cache \
    curl \
    openssl \
    && rm -rf /var/cache/apk/*

# Copy nginx configuration
COPY client/nginx/nginx.prod.conf /etc/nginx/conf.d/default.conf

# Copy built frontend from build stage
COPY --from=build-stage /app/dist /usr/share/nginx/html

# Create necessary directories
RUN mkdir -p /etc/ssl/private /etc/ssl/certs /var/log/nginx /var/cache/nginx

# Create self-signed certificate for development (replace with real certs in production)
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /etc/ssl/private/nginx-selfsigned.key \
    -out /etc/ssl/certs/nginx-selfsigned.crt \
    -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"

# Set proper permissions
RUN chown -R nginx:nginx /var/cache/nginx /var/log/nginx /etc/ssl/private /etc/ssl/certs \
    && chmod 600 /etc/ssl/private/nginx-selfsigned.key \
    && chmod 644 /etc/ssl/certs/nginx-selfsigned.crt

# Create health check endpoint
RUN echo "healthy" > /usr/share/nginx/html/health

# Expose ports
EXPOSE 80 443

# Use nginx user for security
USER nginx

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
