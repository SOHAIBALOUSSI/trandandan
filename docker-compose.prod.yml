version: '3.8'

services:
  # Redis Service
  redis:
    container_name: redis-prod
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - trandenden-net
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # RabbitMQ Service
  rabbitmq:
    container_name: rabbitmq-prod
    image: rabbitmq:3-management-alpine
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Auth Service
  auth:
    container_name: auth-service-prod
    build:
      context: ./server/auth-service
      dockerfile: Dockerfile.prod
    image: auth-service:prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Profile Service
  profile:
    container_name: profile-service-prod
    build:
      context: ./server/profile-service
      dockerfile: Dockerfile.prod
    image: profile-service:prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Friends Service
  friends:
    container_name: friends-service-prod
    build:
      context: ./server/relationships-service
      dockerfile: Dockerfile.prod
    image: friends-service:prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Notifications Service
  notifications:
    container_name: notifications-service-prod
    build:
      context: ./server/notifications-service
      dockerfile: Dockerfile.prod
    image: notifications-service:prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chat Service
  chat:
    container_name: chat-service-prod
    build:
      context: ./server/chat-service
      dockerfile: Dockerfile.prod
    image: chat-service:prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Dashboard Service
  dashboard:
    container_name: dashboard-service-prod
    build:
      context: ./server/dashboard-service
      dockerfile: Dockerfile.prod
    image: dashboard-service:prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Game Service
  game:
    container_name: game-service-prod
    build:
      context: ./server/game-service
      dockerfile: Dockerfile.prod
    image: game-service:prod
    restart: unless-stopped
    env_file:
      - .env.prod
    environment:
      - NODE_ENV=production
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
    networks:
      - trandenden-net
    volumes:
      - game-data:/app/db
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Gateway
  nginx:
    container_name: nginx-gateway-prod
    build:
      context: .
      dockerfile: client/nginx/Dockerfile.prod
    image: nginx-gateway:prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth
      - profile
      - friends
      - notifications
      - chat
      - redis
      - rabbitmq
      - game
      - dashboard
    networks:
      - trandenden-net
    volumes:
      - ./ssl:/etc/ssl
      - ./logs/nginx:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  trandenden-net:
    name: trandenden-net-prod
    driver: bridge

volumes:
  redis-data:
    driver: local
  rabbitmq-data:
    driver: local
  game-data:
    driver: local
